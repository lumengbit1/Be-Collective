{"version":3,"sources":["Tree.js","App.js","serviceWorker.js","index.js"],"names":["DirectoryTree","Tree","TreeNode","ITree","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","readablizeBytes","bytes","e","Math","floor","log","pow","toFixed","totalFiles","obj","num","size","file","o","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","item","value","type","children","err","return","renderTreeNodes","data","length","map","react_default","a","createElement","title","name","dataRef","isLeaf","state","treeData","fetch","then","response","ok","Error","statusText","json","catch","lastGist","setState","id","className","divider","Component","App","src_Tree","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0821eb23.chunk.js","sourcesContent":["import 'babel-polyfill';\r\nimport React, { Component } from 'react';\r\nimport './Tree.css';\r\nimport {Tree,Divider } from 'antd';\r\n\r\nconst DirectoryTree = Tree.DirectoryTree;\r\nconst TreeNode = Tree.TreeNode;\r\nconst url = \"https://chal-locdrmwqia.now.sh/\";\r\n\r\n\r\n\r\n\r\nclass ITree extends Component {\r\n    constructor(){\r\n        super();\r\n\r\n        this.state={\r\n            treeData: [],\r\n        }\r\n    };\r\n\r\n    //fetch data from URL;\r\n    async componentDidMount(){\r\n        let lastGist = await fetch(url).then(response => {\r\n            if (!response.ok) throw new Error(response.statusText);\r\n            return response.json();\r\n        }).catch(function(err) {\r\n            throw new Error(err);\r\n        })\r\n\r\n        this.setState({treeData: lastGist.data});\r\n    }\r\n\r\n    //Calculate units of size\r\n    readablizeBytes = (bytes) =>{\r\n        var s = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\r\n        var e = Math.floor(Math.log(bytes)/Math.log(1024));\r\n        return (bytes/Math.pow(1024, Math.floor(e))).toFixed(2)+\" \"+s[e];\r\n    }\r\n\r\n    //Calculate total number and size of file\r\n    totalFiles=(obj)=>{\r\n        let num=0,size=0;\r\n        let file=(o)=> {\r\n            for (let item of o) {\r\n                if (item.type === 'file') {\r\n                    num++;\r\n                    size=size+item.size;\r\n                } else if (item.children) {\r\n                    //this.totalFiles(item.children)\r\n                    file(item.children)\r\n\r\n\r\n                }\r\n            }\r\n            let num_size=[num,size];\r\n            return num_size;\r\n        }\r\n        let totalnum_size = file(obj);\r\n        return totalnum_size;\r\n    }\r\n\r\n    //Generated file directory\r\n    renderTreeNodes = (data) => {\r\n        if(data.length===0){\r\n            return;\r\n        }\r\n        return data.map((item) => {\r\n            if (item.children) {\r\n                return (\r\n                    <TreeNode title={item.name+((item.size)?' '+this.readablizeBytes(item.size):'')}  dataRef={item} isLeaf={(item.type==='file')?true:false}>\r\n                        {this.renderTreeNodes(item.children)}\r\n                    </TreeNode>\r\n                );\r\n            }\r\n            return <TreeNode title={item.name+((item.size)?' '+this.readablizeBytes(item.size):'')} dataRef={item} isLeaf={(item.type==='file')?true:false}/>;\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div id='main'>\r\n                <div>\r\n                    <DirectoryTree className='tree'>\r\n                        {this.renderTreeNodes(this.state.treeData)}\r\n                    </DirectoryTree>\r\n                </div>\r\n            <Divider className='divider' />\r\n                <div id='total'>\r\n                    Total Files: {this.totalFiles(this.state.treeData)[0]}\r\n                    <br/>\r\n                    Total Filesize: {this.readablizeBytes(this.totalFiles(this.state.treeData)[1])}\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n        );\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default ITree;\r\n","import 'babel-polyfill';\nimport React, { Component } from 'react';\nimport './App.css';\nimport ITree from './Tree';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n            <ITree/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'babel-polyfill';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}